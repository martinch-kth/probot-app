import * as React from 'react';
import * as PropTypes from 'prop-types';
import { Theme } from '../theming';
export declare type ShowTooltip = (content: null | React.ReactNode, event: React.SyntheticEvent<any>) => void;
export declare type HideTooltip = () => void;
export interface ContainerChildrenProps {
    showTooltip: ShowTooltip;
    hideTooltip: HideTooltip;
}
export interface ContainerProps {
    children: (props: ContainerChildrenProps) => React.ReactNode;
    isInteractive: boolean;
    theme: Theme;
}
export interface TooltipPosition {
    top?: number;
    right?: number;
    bottom?: number;
    left?: number;
}
export interface ContainerState {
    isTooltipVisible: boolean;
    tooltipContent: null | React.ReactNode;
    position: TooltipPosition;
}
export default class Container extends React.Component<ContainerProps, ContainerState> {
    static propTypes: {
        children: PropTypes.Validator<(...args: any[]) => any>;
        isInteractive: PropTypes.Validator<boolean>;
        theme: PropTypes.Validator<object>;
    };
    static defaultProps: {
        isInteractive: boolean;
    };
    state: {
        isTooltipVisible: boolean;
        tooltipContent: any;
        position: {};
    };
    private container;
    showTooltip: (content: React.ReactNode, event: React.MouseEvent<any>) => void;
    hideTooltip: () => void;
    render(): {};
}
