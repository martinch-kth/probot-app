/**
 * Computes distance between two points.
 *
 * @param {number} x1
 * @param {number} y1
 * @param {number} x2
 * @param {number} y2
 * @return {number}
 */
export declare const getDistance: (x1: any, y1: any, x2: any, y2: any) => number;
/**
 * Computes angle (radians) between two points.
 *
 * @param {number} x1
 * @param {number} y1
 * @param {number} x2
 * @param {number} y2
 * @return {number}
 */
export declare const getAngle: (x1: any, y1: any, x2: any, y2: any) => number;
/**
 * Check if cursor is in given rectangle.
 *
 * @param {number} x
 * @param {number} y
 * @param {number} width
 * @param {number} height
 * @param {number} cursorX
 * @param {number} cursorY
 * @return {boolean}
 */
export declare const isCursorInRect: (x: any, y: any, width: any, height: any, cursorX: any, cursorY: any) => boolean;
/**
 * Check if cursor is in given ring.
 *
 * @param {number} centerX
 * @param {number} centerY
 * @param {number} radius
 * @param {number} innerRadius
 * @param {number} cursorX
 * @param {number} cursorY
 * @return {boolean}
 */
export declare const isCursorInRing: (centerX: any, centerY: any, radius: any, innerRadius: any, cursorX: any, cursorY: any) => boolean;
/**
 * Search for an arc being under cursor.
 *
 * @param {number}         centerX
 * @param {number}         centerY
 * @param {number}         radius
 * @param {number}         innerRadius
 * @param {Array.<Object>} arcs
 * @param {number}         cursorX
 * @param {number}         cursorY
 * @return {*}
 */
export declare const getHoveredArc: (centerX: any, centerY: any, radius: any, innerRadius: any, arcs: any, cursorX: any, cursorY: any) => any;
