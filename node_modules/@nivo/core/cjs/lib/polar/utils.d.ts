export declare const TWO_PI: number;
export declare const degreesToRadians: (degrees: number) => number;
export declare const radiansToDegrees: (radians: number) => number;
export declare const midAngle: (arc: {
    startAngle: number;
    endAngle: number;
}) => number;
export declare const positionFromAngle: (angle: number, distance: number) => {
    x: number;
    y: number;
};
/**
 * Normalize given angle (degrees) in the 0~360 range.
 *
 * @param {number} angle
 *
 * @return {number}
 */
export declare const absoluteAngleDegrees: (angle: any) => number;
export declare const absoluteAngleRadians: (angle: any) => number;
/**
 * Computes the bounding box for a circle arc.
 *
 * Assumptions:
 *   - Anywhere the arc intersects an axis will be a max or a min.
 *   - If the arc doesn't intersect an axis, then the center
 *     will be one corner of the bounding rectangle,
 *     and this is the only case when it will be.
 *   - The only other possible extreme points of the sector to consider
 *     are the endpoints of the radii.
 *
 * This script was built within the help of this answer on stackoverflow:
 *   https://stackoverflow.com/questions/1336663/2d-bounding-box-of-a-sector
 *
 * @param {number}  ox                   - circle x origin
 * @param {number}  oy                   - circle y origin
 * @param {number}  radius               - circle radius
 * @param {number}  startAngle           - arc start angle
 * @param {number}  endAngle             - arc end angle
 * @param {boolean} [includeCenter=true] - if true, include the center
 *
 * @return {{ points: *[][], x: number, y: number, width: number, height: number }}
 */
export declare const computeArcBoundingBox: (ox: any, oy: any, radius: any, startAngle: any, endAngle: any, includeCenter?: boolean) => {
    points: any[];
    x: number;
    y: number;
    width: number;
    height: number;
};
