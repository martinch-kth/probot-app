import * as PropTypes from 'prop-types';
export declare const axisThemePropType: PropTypes.Requireable<PropTypes.InferProps<{
    domain: PropTypes.Validator<PropTypes.InferProps<{
        line: PropTypes.Validator<PropTypes.InferProps<{
            stroke: PropTypes.Validator<string>;
            strokeWidth: PropTypes.Validator<number>;
            strokeDasharray: PropTypes.Requireable<string>;
        }>>;
    }>>;
    ticks: PropTypes.Validator<PropTypes.InferProps<{
        line: PropTypes.Validator<PropTypes.InferProps<{
            stroke: PropTypes.Validator<string>;
            strokeWidth: PropTypes.Validator<number>;
            strokeDasharray: PropTypes.Requireable<string>;
        }>>;
        text: PropTypes.Validator<PropTypes.InferProps<{
            fill: PropTypes.Validator<string>;
            fontSize: PropTypes.Validator<string | number>;
        }>>;
    }>>;
    legend: PropTypes.Validator<PropTypes.InferProps<{
        text: PropTypes.Validator<PropTypes.InferProps<{
            fill: PropTypes.Validator<string>;
            fontSize: PropTypes.Validator<string | number>;
        }>>;
    }>>;
}>>;
export declare const gridThemePropType: PropTypes.Requireable<PropTypes.InferProps<{
    line: PropTypes.Validator<PropTypes.InferProps<{
        stroke: PropTypes.Validator<string>;
        strokeWidth: PropTypes.Validator<number>;
        strokeDasharray: PropTypes.Requireable<string>;
    }>>;
}>>;
export declare const legendsThemePropType: PropTypes.Requireable<PropTypes.InferProps<{
    text: PropTypes.Validator<PropTypes.InferProps<{
        fill: PropTypes.Validator<string>;
        fontSize: PropTypes.Validator<string | number>;
    }>>;
}>>;
export declare const labelsThemePropType: PropTypes.Requireable<PropTypes.InferProps<{
    text: PropTypes.Validator<PropTypes.InferProps<{
        fill: PropTypes.Validator<string>;
        fontSize: PropTypes.Validator<string | number>;
    }>>;
}>>;
export declare const dotsThemePropType: PropTypes.Requireable<PropTypes.InferProps<{
    text: PropTypes.Validator<PropTypes.InferProps<{
        fill: PropTypes.Validator<string>;
        fontSize: PropTypes.Validator<string | number>;
    }>>;
}>>;
export declare const themePropType: PropTypes.Requireable<PropTypes.InferProps<{
    background: PropTypes.Validator<string>;
    axis: PropTypes.Validator<PropTypes.InferProps<{
        domain: PropTypes.Validator<PropTypes.InferProps<{
            line: PropTypes.Validator<PropTypes.InferProps<{
                stroke: PropTypes.Validator<string>;
                strokeWidth: PropTypes.Validator<number>;
                strokeDasharray: PropTypes.Requireable<string>;
            }>>;
        }>>;
        ticks: PropTypes.Validator<PropTypes.InferProps<{
            line: PropTypes.Validator<PropTypes.InferProps<{
                stroke: PropTypes.Validator<string>;
                strokeWidth: PropTypes.Validator<number>;
                strokeDasharray: PropTypes.Requireable<string>;
            }>>;
            text: PropTypes.Validator<PropTypes.InferProps<{
                fill: PropTypes.Validator<string>;
                fontSize: PropTypes.Validator<string | number>;
            }>>;
        }>>;
        legend: PropTypes.Validator<PropTypes.InferProps<{
            text: PropTypes.Validator<PropTypes.InferProps<{
                fill: PropTypes.Validator<string>;
                fontSize: PropTypes.Validator<string | number>;
            }>>;
        }>>;
    }>>;
    grid: PropTypes.Validator<PropTypes.InferProps<{
        line: PropTypes.Validator<PropTypes.InferProps<{
            stroke: PropTypes.Validator<string>;
            strokeWidth: PropTypes.Validator<number>;
            strokeDasharray: PropTypes.Requireable<string>;
        }>>;
    }>>;
    legends: PropTypes.Validator<PropTypes.InferProps<{
        text: PropTypes.Validator<PropTypes.InferProps<{
            fill: PropTypes.Validator<string>;
            fontSize: PropTypes.Validator<string | number>;
        }>>;
    }>>;
    labels: PropTypes.Validator<PropTypes.InferProps<{
        text: PropTypes.Validator<PropTypes.InferProps<{
            fill: PropTypes.Validator<string>;
            fontSize: PropTypes.Validator<string | number>;
        }>>;
    }>>;
    dots: PropTypes.Validator<PropTypes.InferProps<{
        text: PropTypes.Validator<PropTypes.InferProps<{
            fill: PropTypes.Validator<string>;
            fontSize: PropTypes.Validator<string | number>;
        }>>;
    }>>;
}>>;
